{"version":3,"file":"media_manager.min.js","sources":["../src/media_manager.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/ //\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/*\n * Plenary meeting Jitsi integration media manager\n *\n * @package    plenumform_jitsi2\n * @module     plenumform_jitsi2/media_manager\n * @copyright  2025 Daniel Thies\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nvar domain;\nvar connection;\n\nimport Ajax from \"core/ajax\";\nimport JitsiMeetJS from \"plenumform_jitsi2/lib-jitsi-meet.min\";\nimport Notification from \"core/notification\";\nimport Templates from \"core/templates\";\n\nexport default class MediaManager {\n    /**\n     * Initialize player plugin\n     *\n     * @param {int} contextid\n     * @param {int} delay\n     * @param {string} server Jitsi server to use\n     * @param {string} room Room name\n     * @param {object} userinfo User information to pass to meeting\n     * @param {string} jwt JWT authentication token\n     *\n     * @returns {bool}\n     */\n    constructor(contextid, delay, server, room, userinfo, jwt) {\n        this.contextid = contextid;\n        domain = server;\n        this.userinfo = [];\n        this.displayedTracks = [];\n        this.videoTracks = {};\n        this.audioTracks = {};\n\n        if (delay) {\n            setInterval(() => {\n                this.updateMotions(contextid);\n            }, delay);\n        }\n\n        JitsiMeetJS.init();\n        JitsiMeetJS.setLogLevel(JitsiMeetJS.logLevels.DEBUG);\n        if (connection) {\n            connection.disconnect();\n        }\n\n        connection = new JitsiMeetJS.JitsiConnection(null, jwt, {\n            serviceUrl: `https://${ domain }/http-bind`,\n            hosts: {\n                domain: domain,\n                muc: `conference.${ domain }`\n            }\n        });\n        connection.addEventListener(JitsiMeetJS.events.connection.CONNECTION_ESTABLISHED, () => {\n            this.room = connection.initJitsiConference(room, {\n                disableSimulcast: true\n            });\n            this.room.addEventListener(JitsiMeetJS.events.conference.TRACK_ADDED, track => {\n                this.onRemoteTrack(track);\n            });\n            this.room.addEventListener(JitsiMeetJS.events.conference.TRACK_REMOVED, track => {\n                track.dispose();\n            });\n            this.room.addCommandListener('updatecontent', () => {\n                this.updateMotions(contextid);\n            });\n            this.room.on(JitsiMeetJS.events.conference.CONFERENCE_JOINED, () => {\n                this.updateMotions(contextid);\n            });\n\n            document.body.addEventListener(\n                'motioncreated',\n                () => {\n                    this.room.sendCommandOnce('updatecontent', {\n                        value: 'updatecontent',\n                        attributes: {},\n                        children: []\n                    });\n                }\n            );\n            document.body.addEventListener(\n                'motionupdated',\n                () => {\n                    this.room.sendCommandOnce('updatecontent', {\n                        value: 'updatecontent',\n                        attributes: {},\n                        children: []\n                    });\n                }\n            );\n\n            this.room.join();\n        });\n\n        connection.connect();\n\n        document.addEventListener('click', e => {\n            this.handleClick(e);\n        });\n        document.body.addEventListener('click', e => {\n            this.muteAudio(e);\n        });\n\n        return true;\n    }\n\n    /**\n     * Update motions\n     *\n     * @param {int} contextid\n     */\n    async updateMotions(contextid) {\n        const selector = `[data-contextid=\"${contextid}\"][data-region=\"plenum-motions\"]`;\n        const content = document.querySelector(selector);\n        if (content) {\n            const response = await Ajax.call([{\n                args: {\n                    contextid: contextid\n                },\n                contextid: contextid,\n                fail: Notification.exception,\n                methodname: 'plenumform_jitsi2_update_content'\n            }])[0];\n            if (response.motions) {\n                Templates.replaceNodeContents(content, response.motions, response.javascript);\n                this.userinfo = response.userinfo;\n                this.updateMedia();\n            }\n            if (response.controls) {\n                const selector = `[data-contextid=\"${contextid}\"][data-region=\"plenum-deft-controls\"]`;\n                Templates.replaceNodeContents(selector, response.controls, '');\n            }\n            if (!response.sharevideo) {\n                this.room.getLocalTracks().forEach(track => {\n                    track.dispose();\n                });\n            }\n        }\n    }\n\n    /**\n     * Attach or detach media\n     */\n    updateMedia() {\n        this.displayedTracks.forEach(async track => {\n            if (!this.userinfo.find(speaker => speaker.id == track.getParticipantId())) {\n                document.querySelectorAll(\n                    `[data-region=\"slot-${ track.role }\"] ${ track.getType() }`\n                ).forEach(player => {\n                    track.detach(player);\n                });\n                delete this.displayedTracks[this.displayedTracks.indexOf(track)];\n            }\n        });\n        this.userinfo.forEach(speaker => {\n            if (this.videoTracks[speaker.id]) {\n                const track = this.videoTracks[speaker.id];\n                if (!this.displayedTracks.includes(track)) {\n                    track.role = speaker.role;\n                    track.attach(document.querySelector(`[data-region=\"slot-${ speaker.role }\"] ${ track.getType() }`));\n                    this.displayedTracks.push(track);\n                }\n            }\n            if (this.audioTracks[speaker.id]) {\n                const track = this.audioTracks[speaker.id];\n                if (!this.displayedTracks.includes(track)) {\n                    track.role = speaker.role;\n                    track.attach(document.querySelector(`[data-region=\"slot-${ speaker.role }\"] ${ track.getType() }`));\n                    this.displayedTracks.push(track);\n                }\n            }\n            document.querySelectorAll(`[data-region=\"slot-${ speaker.role }\"] .card-header`).forEach(function(h) {\n                h.innerHTML = speaker.name;\n            });\n            document.querySelectorAll(`[data-region=\"slot-${ speaker.role }\"] video`).forEach(function(video) {\n                video.poster = speaker.pictureurl;\n            });\n        });\n    }\n\n    /**\n     * Process new remote track\n     *\n     * @param {JitsiTrack} track New track\n     */\n    onRemoteTrack(track) {\n        if (track.getType() == 'video') {\n            this.videoTracks[track.getParticipantId()] = track;\n        } else {\n            this.audioTracks[track.getParticipantId()] = track;\n        }\n        this.updateMedia();\n    }\n\n    /**\n     * Change published media in activity\n     *\n     * @param {bool} publish Whether to add or remove media\n     */\n    async publish(publish) {\n        await Ajax.call([{\n            args: {\n                contextid: this.contextid,\n                id: this.room.myUserId(),\n                publish: publish\n            },\n            contextid: this.contextid,\n            fail: Notification.exception,\n            methodname: 'plenumform_jitsi2_publish_feed'\n        }])[0];\n\n        this.room.sendCommandOnce('updatecontent', {\n            value: 'updatecontent',\n            attributes: {},\n            children: []\n        });\n    }\n\n    /**\n     * Handle button click\n     *\n     * @param {Event} e Click event\n     */\n    async handleClick(e) {\n        const button = e.target.closest('button[data-action=\"publish\"], button[data-action=\"unpublish\"]');\n\n        if (!button) {\n            return;\n        }\n        e.stopPropagation();\n        e.preventDefault();\n\n        this.room.getLocalTracks().forEach(track => {\n            track.dispose();\n        });\n\n        if (button.dataset.action == 'publish') {\n            const tracks = await JitsiMeetJS.createLocalTracks({\n                devices: ['video', 'audio'],\n                constraints: {aspectRatio: {exact: 1}, height: {ideal: 360}, width: {ideal: 360}}\n            });\n            tracks.forEach(track => {\n                if (this[`${ track.getType() }Track`]) {\n                    this.room.replaceTrack(this[`${ track.getType() }Track`], track);\n                } else {\n                    this.room.addTrack(track);\n                }\n                this[`${ track.getType() }Track`] = track;\n            });\n            this.publish(true);\n        } else {\n            this.publish(false);\n        }\n    }\n\n    /**\n     * Handle mute switch change\n     *\n     * @param {Event} e The switch event\n     */\n    muteAudio(e) {\n        const input = e.target.closest('[data-region=\"audio-control\"] input');\n        if (!input) {\n            return;\n        }\n        setTimeout(() => {\n            if (input.checked) {\n                document.querySelectorAll('[data-region=\"plenum-deft-media\"] audio').forEach(audio => {\n                    if (\n                        !this.room.getLocalTracks().length\n                        || !this.userinfo.find(speaker => (\n                            (speaker.id == this.room.myUserId())\n                            && audio.closest(`[data-region=\"slot-${ speaker.role }\"]`)\n                        ))\n                    ) {\n                        audio.volume = 1;\n                        audio.muted = '';\n                        audio.setAttribute('data-active', 'true');\n                    } else {\n                        audio.volume = 0;\n                        audio.muted = true;\n                    }\n                    audio.play();\n                });\n            } else {\n                document.querySelectorAll('audio').forEach(audio => {\n                    audio.muted = true;\n                    audio.removeAttribute('data-active');\n                });\n            }\n        });\n    }\n}\n"],"names":["domain","connection","constructor","contextid","delay","server","room","userinfo","jwt","displayedTracks","videoTracks","audioTracks","setInterval","updateMotions","init","setLogLevel","JitsiMeetJS","logLevels","DEBUG","disconnect","JitsiConnection","serviceUrl","hosts","muc","addEventListener","events","CONNECTION_ESTABLISHED","initJitsiConference","disableSimulcast","conference","TRACK_ADDED","track","onRemoteTrack","TRACK_REMOVED","dispose","addCommandListener","on","CONFERENCE_JOINED","document","body","sendCommandOnce","value","attributes","children","join","connect","e","handleClick","muteAudio","selector","content","querySelector","response","Ajax","call","args","fail","Notification","exception","methodname","motions","replaceNodeContents","javascript","updateMedia","controls","sharevideo","getLocalTracks","forEach","async","this","find","speaker","id","getParticipantId","querySelectorAll","role","getType","player","detach","indexOf","includes","attach","push","h","innerHTML","name","video","poster","pictureurl","publish","myUserId","button","target","closest","stopPropagation","preventDefault","dataset","action","createLocalTracks","devices","constraints","aspectRatio","exact","height","ideal","width","replaceTrack","addTrack","input","setTimeout","checked","audio","length","volume","muted","setAttribute","play","removeAttribute"],"mappings":"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"}