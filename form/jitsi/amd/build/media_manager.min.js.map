{"version":3,"file":"media_manager.min.js","sources":["../src/media_manager.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/ //\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/*\n * Plenary meeting Jitsi integration media manager\n *\n * @package    plenumform_jitsi\n * @module     plenumform_jitsi/media_manager\n * @copyright  2023 Daniel Thies\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nvar api;\nvar domain;\nvar conferenceOptions;\n\nimport Ajax from \"core/ajax\";\nimport JitsiMeetExternalAPI from \"plenumform_jitsi/external_api\";\nimport Notification from \"core/notification\";\nimport Templates from \"core/templates\";\n\nexport default class MediaManager {\n    /**\n     * Initialize player plugin\n     *\n     * @param {int} contextid\n     * @param {int} delay\n     * @param {string} server Jitsi server to use\n     * @param {object} options Room options\n     *\n     * @returns {bool}\n     */\n    constructor(contextid, delay, server, options) {\n        this.contextid = contextid;\n        options.parentNode = document.querySelector('#meet');\n        options.contextid = contextid;\n        conferenceOptions = options;\n        domain = server;\n\n        if (delay) {\n            setInterval(() => {\n                updateMotions(contextid);\n            }, delay);\n        }\n\n        document.removeEventListener('click', handleClick);\n        document.addEventListener('click', handleClick);\n\n        document.body.addEventListener(\n            'motioncreated',\n            () => {\n                updateMotions(this.contextid);\n                if (api) {\n                    api.executeCommand('sendEndpointTextMessage', '', 'text');\n                }\n            }\n        );\n        document.body.addEventListener(\n            'motionupdated',\n            () => {\n                updateMotions(this.contextid);\n                if (api) {\n                    api.executeCommand('sendEndpointTextMessage', '', 'text');\n                }\n            }\n        );\n\n        return true;\n    }\n}\n\n/**\n * Update motions\n *\n * @param {int} contextid\n */\nconst updateMotions = async(contextid) => {\n    const selector = `[data-contextid=\"${contextid}\"][data-region=\"plenum-motions\"]`;\n    const content = document.querySelector(selector);\n    if (content) {\n        const response = await Ajax.call([{\n            args: {\n                contextid: contextid\n            },\n            contextid: contextid,\n            fail: Notification.exception,\n            methodname: 'mod_plenum_update_content'\n        }])[0];\n        if (response.motions) {\n            Templates.replaceNodeContents(content, response.motions, response.javascript);\n        }\n    }\n};\n\n/**\n * Register joining the room\n *\n * @return {Promise}\n */\nconst register = function() {\n\n    return Ajax.call([{\n        args: {\n            contextid: Number(conferenceOptions.contextid),\n            join: true\n        },\n        contextid: conferenceOptions.contextid,\n        fail: Notification.exception,\n        methodname: 'plenumform_jitsi_join_room'\n    }])[0];\n};\n\n/**\n * Leave the room\n *\n * @return {Promise}\n */\nconst leave = function() {\n    return Ajax.call([{\n        args: {\n            contextid: Number(conferenceOptions.contextid),\n            join: false\n        },\n        contextid: conferenceOptions.contextid,\n        fail: Notification.exception,\n        methodname: 'plenumform_jitsi_join_room'\n    }])[0];\n};\n\n/**\n * Handle hand raise\n *\n * @param {object} e Event data\n * @return {Promise}\n */\nconst raiseHand = (e) => {\n    return Ajax.call([{\n        args: {\n            contextid: Number(conferenceOptions.contextid),\n            raisehand: !!e.handRaised\n        },\n        contextid: conferenceOptions.contextid,\n        fail: Notification.exception,\n        methodname: 'plenumform_jitsi_raise_hand'\n    }])[0];\n};\n\n/**\n * Handle button click\n *\n * @param {Event} e Click event\n */\nconst handleClick = function(e) {\n    const button = e.target.closest('button[data-action=\"joinroom\"]');\n\n    if (button) {\n        if (api) {\n            api.dispose();\n        }\n        api = new JitsiMeetExternalAPI(domain, conferenceOptions);\n        button.parentNode.classList.add('hidden');\n        conferenceOptions.parentNode.classList.remove('hidden');\n        api.addListener('readyToClose', () => {\n            button.parentNode.classList.remove('hidden');\n            conferenceOptions.parentNode.classList.add('hidden');\n            api.dispose();\n        });\n        api.addListener('videoConferenceJoined', register);\n\n        api.addListener('endpointTextMessageReceived', () => {\n            updateMotions(conferenceOptions.contextid);\n        });\n        api.addListener('videoConferenceLeft', leave);\n        api.addListener('raiseHandUpdated', raiseHand);\n    }\n};\n"],"names":["api","domain","conferenceOptions","constructor","contextid","delay","server","options","parentNode","document","querySelector","setInterval","updateMotions","removeEventListener","handleClick","addEventListener","body","this","executeCommand","async","selector","content","response","Ajax","call","args","fail","Notification","exception","methodname","motions","replaceNodeContents","javascript","register","Number","join","leave","raiseHand","e","raisehand","handRaised","button","target","closest","dispose","JitsiMeetExternalAPI","classList","add","remove","addListener"],"mappings":";;;;;;;;SAsBIA,IACAC,OACAC,mTAkBAC,YAAYC,UAAWC,MAAOC,OAAQC,qBAC7BH,UAAYA,UACjBG,QAAQC,WAAaC,SAASC,cAAc,SAC5CH,QAAQH,UAAYA,UACpBF,kBAAoBK,QACpBN,OAASK,OAELD,OACAM,aAAY,KACRC,cAAcR,aACfC,OAGPI,SAASI,oBAAoB,QAASC,aACtCL,SAASM,iBAAiB,QAASD,aAEnCL,SAASO,KAAKD,iBACV,iBACA,KACIH,cAAcK,KAAKb,WACfJ,KACAA,IAAIkB,eAAe,0BAA2B,GAAI,WAI9DT,SAASO,KAAKD,iBACV,iBACA,KACIH,cAAcK,KAAKb,WACfJ,KACAA,IAAIkB,eAAe,0BAA2B,GAAI,YAKvD,UASTN,cAAgBO,MAAAA,kBACZC,oCAA+BhB,8CAC/BiB,QAAUZ,SAASC,cAAcU,aACnCC,QAAS,OACHC,eAAiBC,cAAKC,KAAK,CAAC,CAC9BC,KAAM,CACFrB,UAAWA,WAEfA,UAAWA,UACXsB,KAAMC,sBAAaC,UACnBC,WAAY,+BACZ,GACAP,SAASQ,4BACCC,oBAAoBV,QAASC,SAASQ,QAASR,SAASU,cAUxEC,SAAW,kBAENV,cAAKC,KAAK,CAAC,CACdC,KAAM,CACFrB,UAAW8B,OAAOhC,kBAAkBE,WACpC+B,MAAM,GAEV/B,UAAWF,kBAAkBE,UAC7BsB,KAAMC,sBAAaC,UACnBC,WAAY,gCACZ,IAQFO,MAAQ,kBACHb,cAAKC,KAAK,CAAC,CACdC,KAAM,CACFrB,UAAW8B,OAAOhC,kBAAkBE,WACpC+B,MAAM,GAEV/B,UAAWF,kBAAkBE,UAC7BsB,KAAMC,sBAAaC,UACnBC,WAAY,gCACZ,IASFQ,UAAaC,GACRf,cAAKC,KAAK,CAAC,CACdC,KAAM,CACFrB,UAAW8B,OAAOhC,kBAAkBE,WACpCmC,YAAaD,EAAEE,YAEnBpC,UAAWF,kBAAkBE,UAC7BsB,KAAMC,sBAAaC,UACnBC,WAAY,iCACZ,GAQFf,YAAc,SAASwB,SACnBG,OAASH,EAAEI,OAAOC,QAAQ,kCAE5BF,SACIzC,KACAA,IAAI4C,UAER5C,IAAM,IAAI6C,sBAAqB5C,OAAQC,mBACvCuC,OAAOjC,WAAWsC,UAAUC,IAAI,UAChC7C,kBAAkBM,WAAWsC,UAAUE,OAAO,UAC9ChD,IAAIiD,YAAY,gBAAgB,KAC5BR,OAAOjC,WAAWsC,UAAUE,OAAO,UACnC9C,kBAAkBM,WAAWsC,UAAUC,IAAI,UAC3C/C,IAAI4C,aAER5C,IAAIiD,YAAY,wBAAyBhB,UAEzCjC,IAAIiD,YAAY,+BAA+B,KAC3CrC,cAAcV,kBAAkBE,cAEpCJ,IAAIiD,YAAY,sBAAuBb,OACvCpC,IAAIiD,YAAY,mBAAoBZ"}