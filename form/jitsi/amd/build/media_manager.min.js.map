{"version":3,"file":"media_manager.min.js","sources":["../src/media_manager.js"],"sourcesContent":["/*\n * Plenary meeting Jitsi integration media manager\n *\n * @package    plenumform_jitsi\n * @module     plenumform_jitsi/media_manager\n * @copyright  2023 Daniel Thies\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nvar options = {\n    configOverwrite: {\n        startWithAudioMuted: true\n    },\n    width: 700,\n    height: 700,\n    parentNode: document.querySelector('#meet')\n};\nvar domain;\n\nimport Ajax from \"core/ajax\";\nimport JitsiMeetExternalAPI from \"plenumform_jitsi/external_api\";\nimport Notification from \"core/notification\";\nimport Templates from \"core/templates\";\n\nexport default class MediaManager {\n    /**\n     * Initialize player plugin\n     *\n     * @param {int} contextid\n     * @param {int} delay\n     * @param {string} server Jitsi server to use\n     * @param {string} room Room name\n     * @param {object} userinfo User information to pass to meeting\n     * @param {string} jwt JWT authentication token\n     *\n     * @returns {bool}\n     */\n    constructor(contextid, delay, server, room, userinfo, jwt) {\n        this.contextid = contextid;\n        domain = server;\n        options.userInfo = userinfo;\n        options.roomName = room;\n        options.contextid = contextid;\n        if (jwt) {\n            options.jwt = jwt;\n        }\n\n        if (!delay) {\n            return false;\n        }\n\n        setInterval(() => {\n            this.updateMotions(contextid);\n        }, delay);\n\n        document.addEventListener('click', handleClick);\n\n        return true;\n    }\n\n    async updateMotions(contextid) {\n        const selector = `[data-contextid=\"${contextid}\"][data-region=\"plenum-motions\"]`;\n        const content = document.querySelector(selector);\n        if (content) {\n            const response = await Ajax.call([{\n                args: {\n                    contextid: contextid\n                },\n                contextid: contextid,\n                fail: Notification.exception,\n                methodname: 'mod_plenum_update_content'\n            }])[0];\n            if (response.motions) {\n                Templates.replaceNodeContents(content, response.motions, response.javascript);\n            }\n        }\n    }\n}\n\n/**\n * Register joining the room\n *\n * @return {Promise}\n */\nconst register = () => {\n    return Ajax.call([{\n        args: {\n            contextid: Number(options.contextid),\n            join: true\n        },\n        contextid: options.contextid,\n        fail: Notification.exception,\n        methodname: 'plenumform_jitsi_join_room'\n    }])[0];\n};\n\n/**\n * Leave the room\n *\n * @return {Promise}\n */\nconst leave = () => {\n    return Ajax.call([{\n        args: {\n            contextid: Number(options.contextid),\n            join: false\n        },\n        contextid: options.contextid,\n        fail: Notification.exception,\n        methodname: 'plenumform_jitsi_join_room'\n    }])[0];\n};\n\n/**\n * Handle hand raise\n *\n * @param {object} e Event data\n * @return {Promise}\n */\nconst raiseHand = (e) => {\n    return Ajax.call([{\n        args: {\n            contextid: Number(options.contextid),\n            raisehand: !!e.handRaised\n        },\n        contextid: options.contextid,\n        fail: Notification.exception,\n        methodname: 'plenumform_jitsi_raise_hand'\n    }])[0];\n};\n\nconst handleClick = e => {\n    const button = e.target.closest('button[data-action=\"joinroom\"]');\n\n    if (button) {\n        const api = new JitsiMeetExternalAPI(domain, options);\n        button.classList.add('hidden');\n        options.parentNode.classList.remove('hidden');\n        api.addListener('readyToClose', () => {\n            button.classList.remove('hidden');\n            options.parentNode.classList.add('hidden');\n            api.dispose();\n        });\n        api.addListener('videoConferenceJoined', register);\n        api.addListener('videoConferenceLeft', leave);\n        api.addListener('raiseHandUpdated', raiseHand);\n    }\n};\n\n"],"names":["domain","options","configOverwrite","startWithAudioMuted","width","height","parentNode","document","querySelector","constructor","contextid","delay","server","room","userinfo","jwt","userInfo","roomName","setInterval","updateMotions","addEventListener","handleClick","selector","content","response","Ajax","call","args","fail","Notification","exception","methodname","motions","replaceNodeContents","javascript","register","Number","join","leave","raiseHand","e","raisehand","handRaised","button","target","closest","api","JitsiMeetExternalAPI","classList","add","remove","addListener","dispose"],"mappings":";;;;;;;;mRAgBIA,OARAC,QAAU,CACVC,gBAAiB,CACbC,qBAAqB,GAEzBC,MAAO,IACPC,OAAQ,IACRC,WAAYC,SAASC,cAAc,iCAsBnCC,YAAYC,UAAWC,MAAOC,OAAQC,KAAMC,SAAUC,iBAC7CL,UAAYA,UACjBV,OAASY,OACTX,QAAQe,SAAWF,SACnBb,QAAQgB,SAAWJ,KACnBZ,QAAQS,UAAYA,UAChBK,MACAd,QAAQc,IAAMA,OAGbJ,QAILO,aAAY,UACHC,cAAcT,aACpBC,OAEHJ,SAASa,iBAAiB,QAASC,cAE5B,uBAGSX,iBACVY,SAAY,oBAAmBZ,4CAC/Ba,QAAUhB,SAASC,cAAcc,aACnCC,QAAS,OACHC,eAAiBC,cAAKC,KAAK,CAAC,CAC9BC,KAAM,CACFjB,UAAWA,WAEfA,UAAWA,UACXkB,KAAMC,sBAAaC,UACnBC,WAAY,+BACZ,GACAP,SAASQ,4BACCC,oBAAoBV,QAASC,SAASQ,QAASR,SAASU,qBAW5EC,SAAW,IACNV,cAAKC,KAAK,CAAC,CACdC,KAAM,CACFjB,UAAW0B,OAAOnC,QAAQS,WAC1B2B,MAAM,GAEV3B,UAAWT,QAAQS,UACnBkB,KAAMC,sBAAaC,UACnBC,WAAY,gCACZ,GAQFO,MAAQ,IACHb,cAAKC,KAAK,CAAC,CACdC,KAAM,CACFjB,UAAW0B,OAAOnC,QAAQS,WAC1B2B,MAAM,GAEV3B,UAAWT,QAAQS,UACnBkB,KAAMC,sBAAaC,UACnBC,WAAY,gCACZ,GASFQ,UAAaC,GACRf,cAAKC,KAAK,CAAC,CACdC,KAAM,CACFjB,UAAW0B,OAAOnC,QAAQS,WAC1B+B,YAAaD,EAAEE,YAEnBhC,UAAWT,QAAQS,UACnBkB,KAAMC,sBAAaC,UACnBC,WAAY,iCACZ,GAGFV,YAAcmB,UACVG,OAASH,EAAEI,OAAOC,QAAQ,qCAE5BF,OAAQ,OACFG,IAAM,IAAIC,sBAAqB/C,OAAQC,SAC7C0C,OAAOK,UAAUC,IAAI,UACrBhD,QAAQK,WAAW0C,UAAUE,OAAO,UACpCJ,IAAIK,YAAY,gBAAgB,KAC5BR,OAAOK,UAAUE,OAAO,UACxBjD,QAAQK,WAAW0C,UAAUC,IAAI,UACjCH,IAAIM,aAERN,IAAIK,YAAY,wBAAyBhB,UACzCW,IAAIK,YAAY,sBAAuBb,OACvCQ,IAAIK,YAAY,mBAAoBZ"}