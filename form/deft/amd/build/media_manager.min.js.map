{"version":3,"file":"media_manager.min.js","sources":["../src/media_manager.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/ //\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/*\n * Plenary meeting Deft integration media manager\n *\n * @package    plenumform_deft\n * @module     plenumform_deft/media_manager\n * @copyright  2023 Daniel Thies\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Ajax from \"core/ajax\";\nimport Templates from \"core/templates\";\nimport Janus from 'block_deft/janus-gateway';\nimport Log from \"core/log\";\nimport Notification from \"core/notification\";\nimport PublishBase from \"block_deft/publish\";\nimport SubscribeBase from \"block_deft/subscribe\";\nimport Socket from \"plenumform_deft/socket\";\n\nvar room;\n\nexport default class MediaManager {\n    /**\n     * Initialize player plugin\n     *\n     * @param {int} contextid\n     * @param {string} token Deft token\n     *\n     * @returns {bool}\n     */\n    constructor(contextid, token) {\n        this.remoteFeeds = {};\n        this.contextid = contextid;\n        const socket = new Socket(contextid, token);\n\n        socket.subscribe(() => {\n            this.updateMotions(contextid);\n        });\n\n        this.initializeRoom(socket, contextid);\n    }\n\n    async initializeRoom(socket, contextid) {\n        try {\n            const response = await this.getRoom();\n\n            this.iceservers = JSON.parse(response.iceservers);\n\n            room = {\n                contextid: contextid,\n                roomid: response.roomid,\n                server: response.server,\n                autogaincontrol: response.autogaincontrol,\n                echocancellation: response.echocancellation,\n                noisesuppression: response.noisesuppression,\n                iceServers: JSON.parse(response.iceservers)\n            };\n            this.roomid = response.roomid;\n            this.server = response.server;\n            document.querySelectorAll('[data-contextid=\"' + this.contextid + '\"] .plenum-control').forEach(control => {\n                control.classList.remove('hidden');\n            });\n\n            this.addListeners();\n\n            return response;\n        } catch (e) {\n            Notification.exception(e);\n        }\n\n        return false;\n    }\n\n    /**\n     * Update content when motions change\n     *\n     * @param {int} contextid\n     */\n    async updateMotions(contextid) {\n        const selector = `[data-contextid=\"${contextid}\"][data-region=\"plenum-motions\"]`;\n        const content = document.querySelector(selector);\n        if (content) {\n\n            const response = await Ajax.call([{\n                args: {\n                    contextid: contextid\n                },\n                contextid: contextid,\n                fail: Notification.exception,\n                methodname: 'plenumform_deft_update_content'\n            }])[0];\n            if (response.motions) {\n                Templates.replaceNodeContents(content, response.motions, response.javascript);\n            }\n            if (response.controls) {\n                const selector = `[data-contextid=\"${contextid}\"][data-region=\"plenum-deft-controls\"]`;\n                Templates.replaceNodeContents(selector, response.controls, '');\n            }\n            response.userinfo.forEach(speaker => {\n                document.querySelectorAll(`[data-region=\"slot-${ speaker.slot }\"] .card-header`).forEach(function(h) {\n                    h.innerHTML = speaker.name;\n                });\n                document.querySelectorAll(`[data-region=\"slot-${ speaker.slot }\"] img`).forEach(function(img) {\n                    img.src = speaker.pictureurl;\n                });\n                setTimeout(() => {\n                    this.subscribeTo(speaker.id, speaker.slot);\n                    document.querySelectorAll(`[data-region=\"slot-${ speaker.slot }\"] audio`).forEach(audio => {\n                        audio.setAttribute('data-speakerid', speaker.id);\n                        audio.volume = (!room.localFeed || Number(room.localFeed.feed) != Number(speaker.id)) ? 1 : 0;\n                    });\n                }, 1000);\n            });\n        }\n    }\n\n    /**\n     * Fetch room info\n     *\n     * @returns {Promise}\n     */\n    getRoom() {\n        return Ajax.call([{\n            methodname: 'plenumform_deft_get_room',\n            args: {contextid: this.contextid},\n            fail: Notification.exception\n        }])[0];\n    }\n\n    /**\n     * Register player events to respond to user interaction and play progress.\n     */\n    addListeners() {\n        document.querySelector('body').removeEventListener('click', handleClick);\n        document.querySelector('body').addEventListener('click', handleClick);\n\n        document.body.removeEventListener('click', this.muteAudio);\n        document.body.addEventListener('click', this.muteAudio);\n    }\n\n    /**\n     * Update existing subscription\n     *\n     * @param {int} source Feed to subscribe\n     * @param {string} slot Identifier used to place stream\n     * @param {object} remoteFeed Subscription\n     */\n    updateSubscription(source, slot, remoteFeed) {\n        const update = {\n            request: 'update',\n            subscribe: [{\n                feed: Number(source)\n            }],\n            unsubscribe: [{\n                feed: Number(remoteFeed.current)\n            }]\n        };\n\n        if (!source && remoteFeed.current) {\n            delete update.subscribe;\n        } else if (source && !remoteFeed.current) {\n            delete update.unsubscribe;\n        }\n\n        if (remoteFeed.current != source) {\n            remoteFeed.muteAudio = !!room.localFeed && (room.localFeed.feed == source);\n            remoteFeed.videoroom.send({message: update});\n            if (room.localFeed && (remoteFeed.current == Number(room.localFeed.feed))) {\n                room.localFeed.handleClose();\n                room.localFeed = null;\n            }\n            if (remoteFeed.audioTrack) {\n                remoteFeed.audioTrack.enabled = !remoteFeed.muteAudio;\n            }\n\n            if (room.publish && (remoteFeed.current == room.publish.feed)) {\n                room.publish.handleClose();\n                room.publish = null;\n            }\n            remoteFeed.current = source;\n            if (!source && remoteFeed) {\n                remoteFeed.handleClose();\n                this.remoteFeeds[slot] = null;\n                document.querySelector(`[data-region=\"slot-${ slot }\"] video`).srcObject = null;\n            }\n            if (Number(source)) {\n                document.querySelectorAll(\n                    `[data-contextid=\"${this.contextid}\"] [data-region=\"slot-${slot}\"] img.card-img-top`\n                ).forEach(img => {\n                    img.classList.add('hidden');\n                });\n                document.querySelectorAll(\n                    `[data-contextid=\"${this.contextid}\"] [data-region=\"slot-${slot}\"] video`\n                ).forEach(video => {\n                    video.classList.remove('hidden');\n                });\n            } else {\n                document.querySelectorAll(\n                    `[data-contextid=\"${this.contextid}\"] [data-region=\"slot-${slot}\"] img.card-img-top`\n                ).forEach(img => {\n                    img.classList.remove('hidden');\n                });\n                document.querySelectorAll(\n                    `[data-contextid=\"${this.contextid}\"] [data-region=\"slot-${slot}\"] video`\n                ).forEach(video => {\n                    video.classList.add('hidden');\n                });\n            }\n        }\n    }\n\n    /**\n     * Subscribe to feed\n     *\n     * @param {int} source Feed to subscribe\n     * @param {string} slot Identifier used to place stream\n     */\n    subscribeTo(source, slot) {\n        const remoteFeed = this.remoteFeeds[slot];\n        if (remoteFeed && !remoteFeed.creatingSubscription && !remoteFeed.restart) {\n            this.updateSubscription(source, slot, remoteFeed);\n        } else if (remoteFeed && remoteFeed.restart) {\n            if (remoteFeed.current != source) {\n                this.remoteFeeds[slot] = null;\n                this.subscribeTo(source, slot);\n            }\n        } else if (remoteFeed) {\n            setTimeout(() => {\n                this.subscribeTo(source, slot);\n            }, 500);\n        } else if (source) {\n            const remoteFeed = new Subscribe(this.contextid, this.iceservers, this.roomid, this.server, this.contextid);\n            remoteFeed.remoteVideo = document.querySelector(\n                `[data-contextid=\"${this.contextid}\"] [data-region=\"slot-${slot}\"] video`\n            );\n            remoteFeed.remoteAudio = remoteFeed.remoteVideo.parentNode.querySelector('audio');\n            remoteFeed.muteAudio = !!room.localFeed && (room.localFeed.feed == source);\n            remoteFeed.startConnection(source);\n            this.remoteFeeds[slot] = remoteFeed;\n        }\n    }\n\n    muteAudio(e) {\n        const input = e.target.closest('[data-region=\"audio-control\"] input');\n        if (!input) {\n            return;\n        }\n        setTimeout(() => {\n            if (input.checked) {\n                document.querySelectorAll('[data-region=\"plenum-deft-media\"] audio').forEach(audio => {\n                    const speakerid = Number(audio.getAttribute('data-speakerid'));\n                    audio.muted = '';\n                    audio.setAttribute('data-active', 'true');\n                    audio.volume = (!room.localFeed || Number(room.localFeed.feed) != speakerid) ? 1 : 0;\n                    audio.play();\n                });\n            } else {\n                document.querySelectorAll('audio').forEach(audio => {\n                    audio.muted = true;\n                    audio.removeAttribute('data-active');\n                });\n            }\n        });\n    }\n}\n\n/**\n * Handle button clicks\n *\n * @param {Event} e\n */\nconst handleClick = function(e) {\n    const button = e.target.closest(\n        '[data-region=\"plenum-motions\"] [data-action], [data-region=\"plenum-deft-controls\"] [data-action]'\n    );\n\n    if (!button) {\n        return;\n    } else if (button.getAttribute('data-action') == 'publish') {\n        if (room.localFeed) {\n            room.localFeed.janus.destroy();\n        }\n        room.localFeed = new Publish(room.contextid, room.iceServers, room.roomid, room.server, room.contextid);\n        window.onbeforeunload = room.localFeed.handleClose.bind(room.localFeed);\n        room.localFeed.videoInput = room.localFeed.shareCamera(room);\n        room.localFeed.startConnection();\n    } else if (button.getAttribute('data-action') == 'unpublish') {\n        if (room.localFeed) {\n            room.localFeed.handleClose();\n            room.localFeed = null;\n        } else {\n            Ajax.call([{\n                args: {\n                    id: 0,\n                    publish: false,\n                    room: room.roomid\n                },\n                contextid: room.contextid,\n                fail: Notification.exception,\n                methodname: 'plenumform_deft_publish_feed'\n            }]);\n        }\n    }\n    return;\n};\n\nclass Subscribe extends SubscribeBase {\n    /**\n     * Register the room\n     *\n     * @param {object} pluginHandle\n     * @return {Promise}\n     */\n    register(pluginHandle) {\n        // Try a registration\n        return Ajax.call([{\n            args: {\n                handle: pluginHandle.getId(),\n                id: Number(this.contextid),\n                plugin: pluginHandle.plugin,\n                room: this.roomid,\n                ptype: false,\n                feed: this.feed,\n                session: pluginHandle.session.getSessionId()\n            },\n            contextid: this.contextid,\n            fail: Notification.exception,\n            methodname: 'plenumform_deft_join_room'\n        }])[0];\n    }\n\n    /**\n     * Attach audio stream to media element\n     *\n     * @param {HTMLMediaElement} audioStream Stream to attach\n     */\n    attachAudio(audioStream) {\n        Janus.attachMediaStream(\n            this.remoteVideo.parentNode.querySelector('audio'),\n            audioStream\n        );\n        audioStream.getTracks().forEach(track => {\n            this.audioTrack = track;\n            track.enabled = !this.muteAudio;\n        });\n    }\n\n    /**\n     * Attach video stream to media element\n     *\n     * @param {HTMLMediaElement} videoStream Stream to attach\n     */\n    attachVideo(videoStream) {\n        this.remoteVideo.closest('[data-region]').querySelectorAll('img.card-img-top').forEach(img => {\n            img.classList.add('hidden');\n        });\n        this.remoteVideo.classList.remove('hidden');\n        Janus.attachMediaStream(\n            this.remoteVideo,\n            videoStream\n        );\n    }\n}\n\nclass Publish extends PublishBase {\n    /**\n     * Register the room\n     *\n     * @param {object} pluginHandle\n     * @return {Promise}\n     */\n    async register(pluginHandle) {\n        // Try a registration\n        try {\n            const response = await Ajax.call([{\n                args: {\n                    handle: pluginHandle.getId(),\n                    id: Number(this.contextid),\n                    plugin: pluginHandle.plugin,\n                    room: this.roomid,\n                    ptype: this.ptype == 'publish',\n                    session: pluginHandle.session.getSessionId()\n                },\n                contextid: this.contextid,\n                fail: Notification.exception,\n                methodname: 'plenumform_deft_join_room'\n            }])[0];\n\n            this.feed = response.id;\n\n            return response;\n        } catch (e) {\n            Notification.exception(e);\n        }\n\n        return false;\n    }\n\n    /**\n     * Publish current video feed\n     *\n     * @returns {Promise}\n     */\n    publishFeed() {\n        return Ajax.call([{\n            args: {\n                id: Number(this.feed),\n                room: this.roomid,\n            },\n            contextid: this.contextid,\n            fail: Notification.exception,\n            methodname: 'plenumform_deft_publish_feed'\n        }])[0];\n    }\n\n    onLocalTrack() {\n        return;\n    }\n\n    /**\n     * Set video source to user camera\n     *\n     * @param {object} room Room configuration\n     */\n    async shareCamera(room) {\n        if (this.videoInput) {\n            try {\n                const videoStream = await this.videoInput;\n                if (videoStream) {\n                    return videoStream;\n                }\n            } catch (e) {\n                Log.debug(e);\n            }\n        }\n\n        try {\n            const videoStream = await navigator.mediaDevices.getUserMedia({\n                video: {\n                    aspectRatio: 1,\n                    width: {max: 160}\n                },\n                audio: {\n                    autoGainControl: room.autogaincontrol,\n                    echoCancellation: room.echocancellation,\n                    noiseSuppression: room.noisesuppression\n                }\n            });\n\n            this.tracks = this.tracks || {};\n            videoStream.getTracks().forEach(track => {\n                this.tracks[track.id] = 'camera';\n            });\n\n            return videoStream;\n        } catch (e) {\n            Log.debug(e);\n        }\n        return null;\n    }\n\n    /**\n     * Process tracks from current video stream and adjust publicatioin\n     *\n     * @param {array} tracks Additional tracks to add\n     */\n    async processStream(tracks) {\n        try {\n            const videoStream = await this.videoInput;\n            this.tracks = this.tracks || {};\n            if (videoStream) {\n                const audiotransceiver = this.getTransceiver('audio'),\n                    videotransceiver = this.getTransceiver('video');\n                videoStream.getVideoTracks().forEach(track => {\n                    track.addEventListener('ended', () => {\n                        if (this.selectedTrack.id == track.id) {\n                            this.unpublish();\n                        } else {\n                            document\n                                .getElementById('video-controls-' + this.tracks[track.id])\n                                .parentNode\n                                .classList\n                                .add('hidden');\n                        }\n                    });\n                    this.selectedTrack = track;\n                    if (videotransceiver) {\n                        this.videoroom.replaceTracks({\n                            tracks: [{\n                                type: 'video',\n                                mid: videotransceiver.mid,\n                                capture: track\n                            }],\n                            error: Notification.exception\n                        });\n\n                        return;\n                    }\n                    tracks.push({\n                        type: 'video',\n                        capture: track,\n                        recv: false\n                    });\n                });\n                videoStream.getAudioTracks().forEach(track => {\n                    if (\n                        document.querySelector('.hidden[data-action=\"mute\"][data-contextid=\"' + this.contextid + '\"][data-type=\"'\n                        + this.tracks[this.selectedTrack.id] + '\"]'\n                    )) {\n                        track.enabled = false;\n                    }\n\n                    if (audiotransceiver) {\n                        this.videoroom.replaceTracks({\n                            tracks: [{\n                                type: 'audio',\n                                mid: audiotransceiver.mid,\n                                capture: track\n                            }],\n                            error: Notification.exception\n                        });\n\n                        return;\n                    }\n                    tracks.push({\n                        type: 'audio',\n                        capture: track,\n                        recv: false\n                    });\n                });\n                if (!tracks.length) {\n                    return videoStream;\n                }\n                this.videoroom.createOffer({\n                    tracks: tracks,\n                    success: (jsep) => {\n                        const publish = {\n                            request: \"configure\",\n                            video: true,\n                            audio: true\n                        };\n                        this.videoroom.send({\n                            message: publish,\n                            jsep: jsep\n                        });\n                    },\n                    error: function(error) {\n                        Notification.alert(\"WebRTC error... \", error.message);\n                    }\n                });\n            }\n\n            return videoStream;\n        } catch (e) {\n            Notification.exception(e);\n        }\n\n        return null;\n    }\n\n    /**\n     * Handle close of windoww\n     */\n    async handleClose() {\n\n        this.janus.destroy();\n\n        Ajax.call([{\n            args: {\n                id: Number(this.feed),\n                publish: false,\n                room: this.roomid\n            },\n            contextid: this.contextid,\n            fail: Notification.exception,\n            methodname: 'plenumform_deft_publish_feed'\n        }]);\n\n        if (this.videoInput) {\n            try {\n                const videoStream = await this.videoInput;\n                if (videoStream) {\n                    videoStream.getTracks().forEach(track => {\n                        track.stop();\n                    });\n                }\n            } catch (e) {\n                Notification.exception(e);\n            }\n        }\n\n        window.onbeforeunload = null;\n    }\n}\n"],"names":["room","constructor","contextid","token","remoteFeeds","socket","Socket","subscribe","updateMotions","initializeRoom","response","this","getRoom","iceservers","JSON","parse","roomid","server","autogaincontrol","echocancellation","noisesuppression","iceServers","document","querySelectorAll","forEach","control","classList","remove","addListeners","e","exception","selector","content","querySelector","Ajax","call","args","fail","Notification","methodname","motions","replaceNodeContents","javascript","controls","userinfo","speaker","slot","h","innerHTML","name","img","src","pictureurl","setTimeout","subscribeTo","id","audio","setAttribute","volume","localFeed","Number","feed","removeEventListener","handleClick","addEventListener","body","muteAudio","updateSubscription","source","remoteFeed","update","request","unsubscribe","current","videoroom","send","message","handleClose","audioTrack","enabled","publish","srcObject","add","video","creatingSubscription","restart","Subscribe","remoteVideo","remoteAudio","parentNode","startConnection","input","target","closest","checked","speakerid","getAttribute","muted","play","removeAttribute","button","janus","destroy","Publish","window","onbeforeunload","bind","videoInput","shareCamera","SubscribeBase","register","pluginHandle","handle","getId","plugin","ptype","session","getSessionId","attachAudio","audioStream","attachMediaStream","getTracks","track","attachVideo","videoStream","PublishBase","publishFeed","onLocalTrack","debug","navigator","mediaDevices","getUserMedia","aspectRatio","width","max","autoGainControl","echoCancellation","noiseSuppression","tracks","audiotransceiver","getTransceiver","videotransceiver","getVideoTracks","selectedTrack","unpublish","getElementById","replaceTracks","type","mid","capture","error","push","recv","getAudioTracks","length","createOffer","success","jsep","alert","stop"],"mappings":"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"}