{"version":3,"file":"grader.min.js","sources":["../../src/grades/grader.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * This module will tie together all of the different calls the gradable module will make.\n *\n * @module     mod_plenum/grades/grader\n * @copyright  2024 Daniel Thies <dethies@google.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport {get_string as getString} from 'core/str';\nimport ModalForm from 'core_form/modalform';\nimport Notification from 'core/notification';\nimport * as Selectors from './grader/selectors';\nimport {serialize} from 'core_form/util';\n\n/**\n * Find top of gradable node\n *\n * @param {HTMLElement} node Target node\n * @return {HTMLElement}\n */\nconst findGradableNode = node => {\n    const gradableItem = node.closest(Selectors.gradableItem);\n    return gradableItem;\n};\n\nvar modalForm;\n\n/**\n * Launch the Grader.\n *\n * @param {HTMLElement} rootNode the root HTML element describing what is to be graded\n * @param {object} param\n * @param {bool} [param.focusOnClose=null]\n */\nconst launchGrading = async(rootNode, {\n    focusOnClose = null,\n} = {}) => {\n    const data = rootNode.dataset;\n\n    modalForm = new ModalForm({\n        formClass: \"mod_plenum\\\\form\\\\grader\",\n        args: {contextid: data.contextid},\n        large: true,\n        modalConfig: {title: getString('gradeusers', 'forum')},\n        // DOM element that should get the focus after the modal dialogue is closed:\n        returnFocus: focusOnClose,\n    });\n    modalForm.show();\n};\n\n/**\n * Launch the Grader.\n *\n * @param {HTMLElement} rootNode the root HTML element describing what is to be graded\n * @param {object} param\n * @param {bool} [param.focusOnClose=null]\n */\nconst launchViewGrading = async(rootNode, {\n    focusOnClose = null,\n} = {}) => {\n    const data = rootNode.dataset;\n\n    modalForm = new ModalForm({\n        formClass: \"mod_plenum\\\\form\\\\grade_view\",\n        args: {contextid: data.contextid},\n        large: true,\n        modalConfig: {title: getString('viewgrades', 'forum')},\n        // DOM element that should get the focus after the modal dialogue is closed:\n        returnFocus: focusOnClose,\n    });\n    modalForm.show();\n};\n\n/**\n * Register listeners to launch the grading panel.\n */\nexport const registerLaunchListeners = () => {\n    document.addEventListener('click', async(e) => {\n        const rootNode = findGradableNode(e.target);\n\n        if (!rootNode) {\n            return;\n        }\n\n        if (e.target.matches(Selectors.launch)) {\n\n            e.preventDefault();\n            try {\n                await launchGrading(rootNode, {\n                    focusOnClose: e.target,\n                });\n            } catch (error) {\n                Notification.exception(error);\n            }\n        } else if (e.target.matches(Selectors.viewGrade)) {\n\n            e.preventDefault();\n            try {\n                await launchViewGrading(rootNode, {\n                    focusOnClose: e.target,\n                });\n            } catch (error) {\n                Notification.exception(error);\n            }\n        }\n    });\n    document.addEventListener('change', e => {\n        const select = e.target.closest(Selectors.userid);\n\n        if (select) {\n            const form = select.closest('form');\n            const data = new FormData(form);\n            const formParams = serialize({contextid: data.get('contextid'), userid: data.get('userid')});\n            const bodyContent = modalForm.getBody(formParams);\n            modalForm.modal.setBodyContent(bodyContent);\n        }\n    });\n};\n"],"names":["modalForm","document","addEventListener","async","rootNode","e","target","closest","Selectors","gradableItem","matches","launch","preventDefault","focusOnClose","data","dataset","ModalForm","formClass","args","contextid","large","modalConfig","title","returnFocus","show","launchGrading","error","exception","viewGrade","launchViewGrading","select","userid","form","FormData","formParams","get","bodyContent","getBody","modal","setBodyContent"],"mappings":";;;;;;;62BAuCIA,2CAmDmC,KACnCC,SAASC,iBAAiB,SAASC,MAAAA,UACzBC,SAA4BC,EAAEC,OAzDdC,QAAQC,UAAUC,iBA2DnCL,YAIDC,EAAEC,OAAOI,QAAQF,UAAUG,QAAS,CAEpCN,EAAEO,2BApDQT,eAAMC,cAAUS,aAClCA,aAAe,6DACf,SACMC,KAAOV,SAASW,SAEtBf,UAAY,IAAIgB,mBAAU,CACtBC,UAAW,2BACXC,KAAM,CAACC,UAAWL,KAAKK,WACvBC,OAAO,EACPC,YAAa,CAACC,OAAO,mBAAU,aAAc,UAE7CC,YAAaV,gBAEPW,OAyCQC,CAAcrB,SAAU,CAC1BS,aAAcR,EAAEC,SAEtB,MAAOoB,6BACQC,UAAUD,aAExB,GAAIrB,EAAEC,OAAOI,QAAQF,UAAUoB,WAAY,CAE9CvB,EAAEO,2BAvCYT,eAAMC,cAAUS,aACtCA,aAAe,6DACf,SACMC,KAAOV,SAASW,SAEtBf,UAAY,IAAIgB,mBAAU,CACtBC,UAAW,+BACXC,KAAM,CAACC,UAAWL,KAAKK,WACvBC,OAAO,EACPC,YAAa,CAACC,OAAO,mBAAU,aAAc,UAE7CC,YAAaV,gBAEPW,OA4BQK,CAAkBzB,SAAU,CAC9BS,aAAcR,EAAEC,SAEtB,MAAOoB,6BACQC,UAAUD,YAInCzB,SAASC,iBAAiB,UAAUG,UAC1ByB,OAASzB,EAAEC,OAAOC,QAAQC,UAAUuB,WAEtCD,OAAQ,OACFE,KAAOF,OAAOvB,QAAQ,QACtBO,KAAO,IAAImB,SAASD,MACpBE,YAAa,mBAAU,CAACf,UAAWL,KAAKqB,IAAI,aAAcJ,OAAQjB,KAAKqB,IAAI,YAC3EC,YAAcpC,UAAUqC,QAAQH,YACtClC,UAAUsC,MAAMC,eAAeH"}